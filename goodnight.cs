using System;
using System.Diagnostics;
using System.Threading;
using System.Windows.Forms;

namespace MemzSimulator
{
    static class Program
    {
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            SimularMemz();
        }

        static void SimularMemz()
        {
            Application.Run(new MainForm());
        }
    }

    public class MainForm : Form
    {
        public MainForm()
        {
            this.Text = "Simulação MEMZ";
            this.FormClosing += new FormClosingEventHandler(MainForm_FormClosing);
            this.Load += (s, e) => IniciarSimulacao();
        }

        private void MainForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            e.Cancel = true; // Cancela o fechamento
            string senha = PromptSenha();
            if (senha == "freefire")
            {
                e.Cancel = false; // Permite o fechamento se a senha estiver correta
            }
            else
            {
                MessageBox.Show("Senha incorreta! Você não pode fechar este aplicativo!", "Atenção", MessageBoxButtons.OK);
            }
        }

        private string PromptSenha()
        {
            // Cria uma caixa de diálogo personalizada para solicitar a senha
            Form prompt = new Form()
            {
                Width = 300,
                Height = 150,
                Text = "Fechar Aplicativo"
            };
            Label textLabel = new Label() { Left = 50, Top = 20, Text = "Digite a palavra-passe:" };
            TextBox textBox = new TextBox() { Left = 50, Top = 50, Width = 200 };
            Button confirmation = new Button() { Text = "OK", Left = 200, Width = 80, Top = 70 };
            confirmation.Click += (sender, e) => { prompt.Close(); };
            prompt.Controls.Add(textBox);
            prompt.Controls.Add(confirmation);
            prompt.Controls.Add(textLabel);
            prompt.ShowDialog();
            return textBox.Text;
        }

        private void IniciarSimulacao()
        {
            Thread simularThread = new Thread(SimularMemz);
            simularThread.IsBackground = true; // Permite que o thread seja encerrado quando o aplicativo fecha
            simularThread.Start();
        }

        private void SimularMemz()
        {
            while (true)
            {
                int acao = EscolherAcao();
                ExecutarAcao(acao);
                Thread.Sleep(2000); // Pausa entre as ações
            }
        }

        static int EscolherAcao()
        {
            Random rand = new Random();
            return rand.Next(1, 7); // Escolhe uma ação entre 1 e 6
        }

        static void ExecutarAcao(int acao)
        {
            switch (acao)
            {
                case 1:
                    AbrirJanelaAleatoria();
                    break;
                case 2:
                    TocarSomAleatorio();
                    break;
                case 3:
                    MostrarMensagemEngraçada();
                    break;
                case 4:
                    ModificarDesktop(); // Apenas simulação
                    break;
                case 5:
                    MostrarInfeccao();
                    break;
                case 6:
                    AbrirNotepads();
                    break;
            }
        }

        static void AbrirJanelaAleatoria()
        {
            MessageBox.Show("Janela aleatória!", "Simulação MEMZ", MessageBoxButtons.OK);
        }

        static void TocarSomAleatorio()
        {
            string[] sons = { "Asterisk", "Exclamation", "Hand", "Beep" };
            Random rand = new Random();
            SystemSound sound = GetSound(sons[rand.Next(sons.Length)]);
            sound.Play(); // Toca o som
        }

        static SystemSound GetSound(string soundName)
        {
            if (soundName == "Asterisk") return SystemSounds.Asterisk;
            if (soundName == "Exclamation") return SystemSounds.Exclamation;
            if (soundName == "Hand") return SystemSounds.Hand;
            return SystemSounds.Beep; // Padrão
        }

        static void MostrarMensagemEngraçada()
        {
            MessageBox.Show("Você sabia que o programador tinha medo de escuro? Porque ele sempre usava 'light'!", "Piada do dia", MessageBoxButtons.OK);
        }

        static void ModificarDesktop()
        {
            MessageBox.Show("Simulando mudança de desktop... (sem alterações reais)", "Simulação", MessageBoxButtons.OK);
        }

        static void MostrarInfeccao()
        {
            MessageBox.Show("A máquina foi infectada!", "Infectado", MessageBoxButtons.OK);
            AbrirPesquisaGoogle();
        }

        static void AbrirPesquisaGoogle()
        {
            Process.Start("https://www.google.com/search?q=como+tirar+um+v%C3%ADrus+do+meu+computador");
        }

        static void AbrirNotepads()
        {
            for (int i = 0; i < 20; i++)
            {
                Process.Start("notepad.exe", "fui hackeado pelo memz fake");
                Thread.Sleep(2500); // Espera 2.5 segundos antes de abrir a próxima
            }
        }
    }
}
