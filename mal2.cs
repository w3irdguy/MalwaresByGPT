using System;
using System.Diagnostics;
using System.Media;
using System.Threading;
using System.Windows.Forms;

namespace MemzSimulator
{
    static class Program
    {
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            SimularMemz();
        }

        static void SimularMemz()
        {
            Console.WriteLine("Iniciando simulação inofensiva do MEMZ...");
            Thread.Sleep(1000); // Pausa inicial

            while (true)
            {
                int acao = EscolherAcao();
                ExecutarAcao(acao);
                Thread.Sleep(2000); // Pausa entre as ações
            }
        }

        static int EscolherAcao()
        {
            Random rand = new Random();
            return rand.Next(1, 7); // Escolhe uma ação entre 1 e 6
        }

        static void ExecutarAcao(int acao)
        {
            switch (acao)
            {
                case 1:
                    AbrirJanelaAleatoria();
                    break;
                case 2:
                    TocarSomAleatorio();
                    break;
                case 3:
                    MostrarMensagemEngraçada();
                    break;
                case 4:
                    ModificarDesktop(); // Apenas simulação
                    break;
                case 5:
                    MostrarInfeccao();
                    break;
                case 6:
                    AbrirNotepads();
                    break;
            }
        }

        static void AbrirJanelaAleatoria()
        {
            MessageBox.Show("Janela aleatória!", "Simulação MEMZ", MessageBoxButtons.OK);
        }

        static void TocarSomAleatorio()
        {
            string[] sons = { "Asterisk", "Exclamation", "Hand", "Beep" };
            Random rand = new Random();
            SystemSound sound = GetSound(sons[rand.Next(sons.Length)]);
            sound.Play();
        }

        static SystemSound GetSound(string soundName)
        {
            return soundName switch
            {
                "Asterisk" => SystemSounds.Asterisk,
                "Exclamation" => SystemSounds.Exclamation,
                "Hand" => SystemSounds.Hand,
                "Beep" => SystemSounds.Beep,
                _ => SystemSounds.Beep,
            };
        }

        static void MostrarMensagemEngraçada()
        {
            MessageBox.Show("Você sabia que o programador tinha medo de escuro? Porque ele sempre usava 'light'!", "Piada do dia", MessageBoxButtons.OK);
        }

        static void ModificarDesktop()
        {
            MessageBox.Show("Simulando mudança de desktop... (sem alterações reais)", "Simulação", MessageBoxButtons.OK);
        }

        static void MostrarInfeccao()
        {
            MessageBox.Show("A máquina foi infectada!", "Infectado", MessageBoxButtons.OK);
            AbrirPesquisaGoogle();
        }

        static void AbrirPesquisaGoogle()
        {
            Process.Start("https://www.google.com/search?q=como+tirar+um+v%C3%ADrus+do+meu+computador");
        }

        static void AbrirNotepads()
        {
            for (int i = 0; i < 20; i++)
            {
                Process.Start("notepad.exe", "fui hackeado pelo memz fake");
                Thread.Sleep(2500);
            }
        }
        
        // Método fictício para simular a prevenção de reinicialização
        static void PrevenirReinicializacao()
        {
            // Aqui você pode usar um loop para simular a prevenção de reinicialização.
            // Note que na prática isso é mais complexo e pode precisar de permissões de administrador.
            while (true)
            {
                // Código que tenta impedir reinicializações
                Thread.Sleep(5000); // Pausa para evitar uso excessivo da CPU
            }
        }
    }
}
