using System;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using System.Timers;

namespace WebcamCapture
{
    public class MainForm : Form
    {
        private const int WM_GRAPHNOTIFY = 0x0401;

        private IGraphBuilder graphBuilder;
        private ICaptureGraphBuilder2 captureGraphBuilder;
        private IBaseFilter sourceFilter;
        private ISampleGrabber sampleGrabber;
        private Bitmap currentFrame;
        private PictureBox pictureBox;
        private Button btnCapture;
        private System.Timers.Timer timer;

        public MainForm()
        {
            this.Text = "Webcam Capture";
            this.Width = 640;
            this.Height = 480;

            pictureBox = new PictureBox { Dock = DockStyle.Fill };
            btnCapture = new Button { Text = "Capturar", Dock = DockStyle.Bottom };
            btnCapture.Click += BtnCapture_Click;

            this.Controls.Add(pictureBox);
            this.Controls.Add(btnCapture);

            InitializeGraph();
        }

        private void InitializeGraph()
        {
            // Inicialização do DirectShow e configuração da webcam
            graphBuilder = (IGraphBuilder)new FilterGraph();
            captureGraphBuilder = (ICaptureGraphBuilder2)new CaptureGraphBuilder2();
            sourceFilter = CreateVideoSource();

            if (sourceFilter != null)
            {
                graphBuilder.AddFilter(sourceFilter, "Video Source");
                captureGraphBuilder.SetFiltergraph(graphBuilder);
                captureGraphBuilder.RenderStream(PinCategory.Preview, MediaType.Video, sourceFilter, null, null);
                graphBuilder.Run();
            }
        }

        private IBaseFilter CreateVideoSource()
        {
            // Implementar a lógica para criar e retornar o filtro da webcam
            return null; // Retorne o filtro correto da câmera
        }

        private void BtnCapture_Click(object sender, EventArgs e)
        {
            // Inicia o timer para mostrar o pop-up
            timer = new System.Timers.Timer(5000); // 5000 ms = 5 segundos
            timer.Elapsed += ShowPopup;
            timer.AutoReset = false; // Executa apenas uma vez
            timer.Start();
        }

        private void ShowPopup(object sender, ElapsedEventArgs e)
        {
            // Mostra o pop-up
            MessageBox.Show("Olha o passarinho!");
            CaptureImage();
        }

        private void CaptureImage()
        {
            // Captura e exibe a imagem atual da webcam
            if (currentFrame != null)
            {
                pictureBox.Image = (Bitmap)currentFrame.Clone();
                SaveFileDialog sfd = new SaveFileDialog
                {
                    Filter = "JPEG Image|*.jpg"
                };
                if (sfd.ShowDialog() == DialogResult.OK)
                {
                    pictureBox.Image.Save(sfd.FileName);
                    MessageBox.Show("Imagem salva com sucesso!");
                }
            }
        }

        protected override void OnClosing(FormClosingEventArgs e)
        {
            // Libere os recursos da câmera
            if (graphBuilder != null)
            {
                graphBuilder.Stop();
                Marshal.ReleaseComObject(graphBuilder);
            }
            base.OnClosing(e);
        }

        protected override void WndProc(ref Message m)
        {
            if (m.Msg == WM_GRAPHNOTIFY)
            {
                // Processar notificações do DirectShow
            }
            base.WndProc(ref m);
        }

        [STAThread]
        public static void Main()
        {
            Application.EnableVisualStyles();
            Application.Run(new MainForm());
        }
    }
}
